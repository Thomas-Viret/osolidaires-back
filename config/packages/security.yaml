security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

            # All of our back office routes that MUST start with /back
        main:
            pattern : ^/back
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            
            # All of our API routes, that must start with / (nb: it would have been better to call it /api...)
        api:
            pattern:   ^/
            stateless: true
            #access ok for anonymous
            anonymous: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        # ADMIN
        - { path: ^/categories, methods: [POST,PATCH], roles: ROLE_ADMIN } 
        # BACK OFFICE ("back/login" is the ONLY route that must be accessible to anyone, 
        # therefore all the other routes must be specified in the path: for ROLE_ADMIN )
        - { path: ^/back/(category|department|proposition|request|admin|beneficiary|volunteer|user), methods: [GET, POST, PUT, PATCH, DELETE], roles: ROLE_ADMIN }
        # - { path: ^/categories, methods: [GET,POST,PATCH], roles: ROLE_ADMIN }
        # - { path: ^/departments, methods: [GET], roles: ROLE_ADMIN }
        

        # BENEFICIARY
        - { path: ^/propositions, methods: [GET], roles: ROLE_BENEFICIARY }
        - { path: ^/requests, methods: [POST, PATCH], roles: ROLE_BENEFICIARY }
        - { path: ^/users, methods: [PATCH], roles: [ROLE_BENEFICIARY, ROLE_VOLUNTEER] }
        - { path: ^/(volunteers|beneficiaries), methods: [GET], roles: [ROLE_BENEFICIARY, ROLE_VOLUNTEER]}
        # - { path: ^/users, methods: [POST,PATCH], roles: ROLE_BENEFICIARY }
        # - { path: ^/requests, methods: [POST, PATCH], roles: ROLE_BENEFICIARY }
        # - { path: ^/beneficiaries, methods: [GET], roles: ROLE_BENEFICIARY }
        # - { path: ^/volunteers, methods: [GET], roles: ROLE_BENEFICIARY }


        # VOLUNTEER
        - { path: ^/requests, methods: [GET], roles: ROLE_VOLUNTEER }
        - { path: ^/propositions, methods: [POST, PATCH], roles: ROLE_VOLUNTEER }
        # - { path: ^/users, methods: [PATCH], roles: ROLE_VOLUNTEER }
        # - { path: ^/(volunteers|beneficiaries), methods: [GET], roles: ROLE_VOLUNTEER }
        # - { path: ^/users, methods: [POST, PATCH], roles: ROLE_VOLUNTEER }
        # - { path: ^/propositions, methods: [POST, PATCH], roles: ROLE_VOLUNTEER }
        # - { path: ^/volunteers, methods: [GET], roles: ROLE_VOLUNTEER }
        # - { path: ^/beneficiaries, methods: [GET], roles: ROLE_VOLUNTEER }

        # API LOGIN
        # - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/categories, methods: [GET], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/departments, methods: [GET], roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/, methods: [GET], roles: IS_AUTHENTICATED_ANONYMOUSLY }

    role_hierarchy:
    #ROLE_ADMIN inherits from ROLE_VOLUNTEER and ROLE_BENEFICIARY
        ROLE_ADMIN: [ROLE_VOLUNTEER, ROLE_BENEFICIARY]
        
       
